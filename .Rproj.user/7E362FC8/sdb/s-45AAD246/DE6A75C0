{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(dplyr)\n\n#library(rgdal)\n\n\n#library(osrm)\n#library(RCurl)\n\ndatimugello<-read.csv(\"Dati_Mugello.csv\")\ndatimugello$Data_accettazione<-as.Date(datimugello$Data_accettazione,\"%d/%m/%Y\")\n\nospedaliU <-read.table(\"indirizzi_ospedali_ripuliti.csv\", sep=\";\", \n                       quote=\"'\", header=TRUE)\n\ndatimugello$sett<-as.factor(strftime(datimugello$Data_accettazione, format=\"%W\"))\ndatimugello$Esito_slashn50<-as.factor(\n    unlist(\n      lapply(\n        strwrap(datimugello$Esito,width=50,simplify = FALSE)\n        ,paste\n        ,collapse='\\n'\n      )\n    ))\n\nfunction(input,output,session){\n  \n  \n  dataf <- reactive({\n    m<-datimugello%>% \n      filter(Data_accettazione %in% seq(input$date_range[1], input$date_range[2],by=\"1 day\") &\n               DesComune %in% input$comuni &\n               Capitolo_princ %in% input$cap)\n    m<-as.data.frame(m)\n    m\n    })\n  # definizione degli input\n  output$comuniControl <- renderUI({\n    comuni_choices <- levels(datimugello$DesComune)\n    selectInput(\"Comuni\", inputId = \"comuni\",\n                choices = comuni_choices,\n                selected = comuni_choices, multiple = TRUE)\n  })\n  \n  output$capitoloControl <- renderUI({\n    cap_choices<-levels(datimugello$Capitolo_princ)\n    selectInput(\"Capitolo diagnosi principale\", inputId = \"cap\",\n              choices = cap_choices,\n              selected = cap_choices, \n              multiple = TRUE)\n  })\n  \n  ## Leggo le coordinate degli ospedali\n\n  #Preparo le icone\n  #icon_id<-makeIcon(\"marker_red.png\", iconWidth = 20,iconHeight = 20)\n  icon_osp<-makeIcon(\"marker_h.png\", iconWidth = 25,\n                   iconHeight = 25)\n  \n  ######## Rappresentazione   ############################\n  \n  output$map <- renderLeaflet(\n    leaflet()\n      %>% addTiles()\n      \n      %>% fitBounds(min(datimugello$LONGITUDINE), min(datimugello$LATITUDINE),max(datimugello$LONGITUDINE), max(datimugello$LATITUDINE))\n      %>%addMarkers (data=ospedaliU, lng=~X.LONGITUDINE\n                , lat=~X.LATITUDINE, icon=icon_osp)\n      %>% addWMSTiles(\n        \"http://www502.regione.toscana.it/wmsraster/com.rt.wms.RTmap/wms?map=wmsambamm&\",\n        layers = \"rt_ambamm.idcomuni.rt.poly\",\n        options = WMSTileOptions(format = \"image/png\", transparent = TRUE),\n        tileOptions(tms = TRUE),\n        attribution = \"prova\")\n        \n  )\n  \n  observe({\n    map<-leafletProxy(\"map\",data=dataf())\n    map%>%clearGroup(group=\"cdata\")\n    \n    if (nrow(dataf())>0)\n    {\n      map%>% addCircleMarkers(~LONGITUDINE\n                        ,~LATITUDINE\n                        ,color = \"#b10026\", radius = 5\n                        , stroke = FALSE, fillOpacity = 0.5\n                        , popup = ~Data_accettazione\n                        ,group=\"cdata\"\n                    )\n    }  \n  })\n  \n  output$numberBox <- renderValueBox({\n    df <-dataf()\n    valueBox(\n      format(nrow(df), format=\"d\", big.mark=\",\"), \"Numero eventi\", icon = NULL,\n      color = \"purple\")\n  })\n  \n  output$meanageBox <- renderValueBox({\n    df <-dataf()\n    valueBox(\n      format(mean(df$Etagg), digit=0, big.mark=\",\"), \"Età media\", icon = NULL,\n      color = \"purple\")\n  })\n  \n  output$settcount<-renderPlot(\n    {\n      per_S<-dataf()%>%\n        group_by(sett, Colore_ingresso)%>%\n        summarise(n=n())\n      if (nrow(dataf())==0){\n        gg<-ggplot(per_S)+geom_point()\n        print(gg)\n      }\n      else\n      {\n        gg<-ggplot(per_S,aes(x=sett,y=n,fill=Colore_ingresso))+\n          geom_bar(stat=\"identity\")+\n          scale_fill_manual(values=c('#FFB347','#FF6961'))+\n          labs(\n            x=\"Numero settimana\"\n            , y=\"N. Accessi\")\n        print(gg)\n      }  \n    })                                              \n\n  output$comunecount<-renderPlot(\n    {\n      per_S<-dataf()%>%\n        group_by(DesComune, Colore_ingresso)%>%\n        summarise(n=n())\n      if (nrow(dataf())==0){\n        gg<-ggplot(per_S)+geom_point()\n        print(gg)\n      }\n      else\n      {\n        gg<-ggplot(per_S,aes(x=DesComune,y=n,fill=Colore_ingresso))+\n          geom_bar(stat=\"identity\")+\n          scale_fill_manual(values=c('#FFB347','#FF6961'))+\n          labs(\n            x=\"Comune\"\n            , y=\"N. Accessi\")+\n        coord_flip()\n        print(gg)\n      }  \n    })                                              \n  \n  output$esitocount<-renderPlot(\n    {\n      per_S<-dataf()%>%\n        group_by(Esito_slashn50, Colore_ingresso)%>%\n        summarise(n=n())\n      if (nrow(dataf())==0){\n        gg<-ggplot(per_S)+geom_point()\n        print(gg)\n      }\n      else\n      {\n        #xlabel.wrap<-lapply(strwrap(per_S$Esito,width=50,simplify = FALSE),paste,collapse='\\n')\n    \n        gg<-ggplot(per_S,aes(x=Esito_slashn50,y=n,fill=Colore_ingresso))+\n          geom_bar(stat=\"identity\")+\n          scale_fill_manual(values=c('#FFB347','#FF6961'))+\n          labs(\n            x=\"Esito\"\n            , y=\"N. Accessi\")+\n          #scale_x_discrete(labels=xlabel.wrap)+\n          coord_flip()\n        print(gg)\n      }  \n    })\n  output$table <- renderDataTable(dataf()%>%\n                    select('Data accettazione'= Data_accettazione,\n                           'Ora accetazione'= Ora_accettazione,\n                           'Settimana'=sett,\n                           'Comune'=DesComune,\n                           'Colore ingresso'=Colore_ingresso,\n                           'Capitolo diagnosi principale'=Capitolo_princ,\n                           'Esito'=Esito\n#                           ,'Tempo attesa minimo'=tempo_attesa_min\n#                           ,'Età'=Etagg\n                    )\n        #, rownames = TRUE\n        , options = list(\n    pageLength = 10, autoWidth = FALSE))\n  \n}\n  ",
    "created" : 1518612071053.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3499109120",
    "id" : "DE6A75C0",
    "lastKnownWriteTime" : 1490356015,
    "last_content_update" : 1490356015,
    "path" : "~/emursdo/test1/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}